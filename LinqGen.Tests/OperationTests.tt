// LinqGen.Tests, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

<#@template language="C#" #>
<#@ assembly name="System.Core" #>
<#
    var intSources = new string[]
    {
        "IntEmpty",
        "IntArray",
        "IntList",
        "IntEnumerable",
    };

    var castSources = new string[]
    {
        "ObjectEmpty",
        "ObjectStringArray",
        "ObjectStringList",
        "ObjectStringEnumerable",
    };

    var testExpressions = new (string title, string linq, string linqgen, string[] sources)[]
    {
        ("Select", "Select(x => x * 2)", "Select(x => x * 2)", intSources),
        ("SelectStruct", "Select(x => x * 2)", "Select(new DoubleSelector())", intSources),
        ("SelectAt", "Select((x, i) => x + i)", "Select((x, i) => x + i)", intSources),
        ("SelectAtStruct", "Select((x, i) => x + i)", "Select(new AddSelector())", intSources),
        ("Where", "Where(x => x % 2 == 0)", "Where(x => x % 2 == 0)", intSources),
        ("WhereStruct", "Where(x => x % 2 == 0)", "Where(new EvenPredicate())", intSources),
        ("WhereAt", "Where((x, i) => (x - i) % 2 == 0)", "Where((x, i) => (x - i) % 2 == 0)", intSources),
        ("WhereAtStruct", "Where((x, i) => (x - i) % 2 == 0)", "Where(new MinusEvenPredicate())", intSources),
        ("Distinct", "Distinct()", "Distinct()", intSources),
        ("DistinctInterface", "Distinct(EqualityComparer<int>.Default)", "Distinct(EqualityComparer<int>.Default)", intSources),
        ("DistinctStruct", "Distinct()", "Distinct(new StructEqualityComparer())", intSources),
        ("Skip", "Skip(2)", "Skip(2)", intSources),
        ("Take", "Take(7)", "Take(7)", intSources),
        ("Cast", "Cast<string>()", "Cast<string>()", castSources),
        ("OfType", "OfType<string>()", "OfType<string>()", castSources),
    };
#>

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Cathei.LinqGen;

namespace Cathei.LinqGen.Tests;

<#
    foreach (var expression in testExpressions)
    {
#>
[TestFixture]
public class <#= expression.title #>_Tests
{
<#
        foreach (var source in expression.sources)
        {
#>

    [Test]
    public void SameAsLinq_<#= source #>()
    {
        var expected = TestData.<#= source #>
            .<#= expression.linq #>;

        var actual = TestData.<#= source #>
            .Specialize()
            .<#= expression.linqgen #>;

        CollectionAssert.AreEqual(expected, actual.AsEnumerable());
    }

    [Test]
    public void MultipleEnumeration_MustBeSame_<#= source #>()
    {
        var enumerable = TestData.<#= source #>
            .Specialize()
            .<#= expression.linqgen #>;

        var array1 = enumerable.ToArray();
        var array2 = enumerable.ToArray();

        CollectionAssert.AreEqual(array1, array2);
    }

    [TestCase(0, 0)]
    [TestCase(5, 0)]
    [TestCase(0, 8)]
    [TestCase(7, 9)]
    public void SliceSameAsLinq_<#= source #>(int skip, int take)
    {
        var expected = TestData.<#= source #>
            .<#= expression.linq #>
            .Skip(skip).Take(take);

        var actual = TestData.<#= source #>
            .Specialize()
            .<#= expression.linqgen #>
            .Skip(skip).Take(take);

        CollectionAssert.AreEqual(expected, actual.AsEnumerable());
    }
<#
        }
#>
}
<#
    }
#>
