// LinqGen.Tests, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

<#@template language="C#" #>
<#@ assembly name="System.Core" #>
<#
    var testExpressions = new (string title, string op, string linq, string linqgen)[]
    {
        ("Select", "Select", "x => x * 2", "x => x * 2"),
        ("SelectStruct", "Select", "x => x * 2", "new DoubleSelector()"),
        ("SelectAt", "Select", "(x, i) => x + i", "(x, i) => x + i"),
        ("SelectAtStruct", "Select", "(x, i) => x + i", "new AddSelector()"),
        ("Where", "Where", "x => x % 2 == 0", "x => x % 2 == 0"),
        ("WhereStruct", "Where", "x => x % 2 == 0", "new EvenPredicate()"),
        ("WhereAt", "Where", "(x, i) => (x - i) % 2 == 0", "(x, i) => (x - i) % 2 == 0"),
        ("WhereAtStruct", "Where", "(x, i) => (x - i) % 2 == 0", "new MinusEvenPredicate()"),
        ("Distinct", "Distinct", "", ""),
        ("DistinctStruct", "Distinct", "", "new StructComparer()"),
        ("Skip", "Skip", "2", "2"),
        ("Take", "Take", "7", "7"),
    };

    var testSources = new string[]
    {
        "IntEmpty",
        "IntArray",
        "IntList",
        "IntEnumerable",
    };
#>

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Cathei.LinqGen;

namespace Cathei.LinqGen.Tests;

<#
    foreach (var expression in testExpressions)
    {
#>
[TestFixture]
public class <#= expression.title #>_Tests
{
<#
        foreach (var source in testSources)
        {
#>

    [Test]
    public void SameAsLinq_<#= source #>()
    {
        var expected = TestData.<#= source #>
            .<#= expression.op #>(<#= expression.linq #>);

        var actual = TestData.<#= source #>
            .Specialize()
            .<#= expression.op #>(<#= expression.linqgen #>);

        CollectionAssert.AreEqual(expected, actual.AsEnumerable());
    }

    [Test]
    public void MultipleEnumeration_MustBeSame_<#= source #>()
    {
        var enumerable = TestData.<#= source #>
            .Specialize()
            .<#= expression.op #>(<#= expression.linqgen #>);

        var array1 = enumerable.ToArray();
        var array2 = enumerable.ToArray();

        CollectionAssert.AreEqual(array1, array2);
    }

    [TestCase(0, 0)]
    [TestCase(5, 0)]
    [TestCase(0, 8)]
    [TestCase(7, 9)]
    public void SliceSameAsLinq_<#= source #>(int skip, int take)
    {
        var expected = TestData.<#= source #>
            .<#= expression.op #>(<#= expression.linq #>)
            .Skip(skip).Take(take);

        var actual = TestData.<#= source #>
            .Specialize()
            .<#= expression.op #>(<#= expression.linqgen #>)
            .Skip(skip).Take(take);

        CollectionAssert.AreEqual(expected, actual.AsEnumerable());
    }
<#
        }
#>
}
<#
    }
#>
