// LinqGen.Tests, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

<#@template language="C#" #>
<#@ assembly name="System.Core" #>
<#
    var intSources = new string[]
    {
        "IntEmpty",
        "IntArray",
        "IntList",
        "IntEnumerable",
    };

    var castSources = new string[]
    {
        "ObjectEmpty",
        "ObjectStringArray",
        "ObjectStringList",
        "ObjectStringEnumerable",
    };

    var testExpressions = new (string title, string linq, string linqgen, string[] sources)[]
    {
        ("Select", "Select(x => x * 2)", "Select(x => x * 2)", intSources),
        ("SelectStruct", "Select(x => x * 2)", "Select(new DoubleSelector())", intSources),
        ("SelectAt", "Select((x, i) => x + i)", "Select((x, i) => x + i)", intSources),
        ("SelectAtStruct", "Select((x, i) => x + i)", "Select(new AddSelector())", intSources),
        ("Where", "Where(x => x % 2 == 0)", "Where(x => x % 2 == 0)", intSources),
        ("WhereStruct", "Where(x => x % 2 == 0)", "Where(new EvenPredicate())", intSources),
        ("WhereAt", "Where((x, i) => (x - i) % 2 == 0)", "Where((x, i) => (x - i) % 2 == 0)", intSources),
        ("WhereAtStruct", "Where((x, i) => (x - i) % 2 == 0)", "Where(new MinusEvenPredicate())", intSources),
        ("Distinct", "Distinct()", "Distinct()", intSources),
        ("DistinctInterface", "Distinct()", "Distinct(EqualityComparer<int>.Default)", intSources),
        ("DistinctStruct", "Distinct()", "Distinct(new StructEqualityComparer())", intSources),
        ("Skip", "Skip(2)", "Skip(2)", intSources),
        ("Take", "Take(7)", "Take(7)", intSources),
        ("Order", "OrderBy(x => x)", "Order()", intSources),
        ("OrderComparer", "OrderBy(x => x)", "Order(Comparer<int>.Default)", intSources),
        ("OrderStruct", "OrderBy(x => x)", "Order(new StructComparer())", intSources),
        ("OrderDesc", "OrderByDescending(x => x)", "OrderDescending()", intSources),
        ("OrderDescComparer", "OrderByDescending(x => x)", "OrderDescending(Comparer<int>.Default)", intSources),
        ("OrderDescStruct", "OrderByDescending(x => x)", "OrderDescending(new StructComparer())", intSources),
        ("OrderBy", "OrderBy(x => x % 3)", "OrderBy(x => x % 3)", intSources),
        ("OrderByKey", "OrderBy(x => x % 3)", "OrderBy(new Mod3Selector())", intSources),
        ("OrderByComparer", "OrderBy(x => x % 3)", "OrderBy(x => x % 3, Comparer<int>.Default)", intSources),
        ("OrderByStruct", "OrderBy(x => x % 3)", "OrderBy(new Mod3Selector(), new StructComparer())", intSources),
        ("OrderByDesc", "OrderByDescending(x => x % 3)", "OrderByDescending(x => x % 3)", intSources),
        ("OrderByDescKey", "OrderByDescending(x => x % 3)", "OrderByDescending(new Mod3Selector())", intSources),
        ("OrderByDescComparer", "OrderByDescending(x => x % 3)",
            "OrderByDescending(x => x % 3, Comparer<int>.Default)", intSources),
        ("OrderByDescStruct", "OrderByDescending(x => x % 3)",
            "OrderByDescending(new Mod3Selector(), new StructComparer())", intSources),
        ("ThenBy", "OrderBy(x => x % 3).ThenBy(x => -x)", "OrderBy(x => x % 3).ThenBy(x => -x)", intSources),
        ("ThenByKey", "OrderBy(x => x % 3).ThenBy(x => -x)",
            "OrderBy(x => x % 3).ThenBy(new NegateSelector())", intSources),
        ("ThenByComparer", "OrderBy(x => x % 3).ThenBy(x => -x)",
            "OrderBy(x => x % 3).ThenBy(x => -x, Comparer<int>.Default)", intSources),
        ("ThenByStruct", "OrderBy(x => x % 3).ThenBy(x => -x)",
            "OrderBy(x => x % 3).ThenBy(new NegateSelector(), new StructComparer())", intSources),
        ("ThenByDesc", "OrderBy(x => x % 3).ThenByDescending(x => -x)",
            "OrderBy(x => x % 3).ThenByDescending(x => -x)", intSources),
        ("ThenByDescKey", "OrderBy(x => x % 3).ThenByDescending(x => -x)",
            "OrderBy(x => x % 3).ThenByDescending(new NegateSelector())", intSources),
        ("ThenByDescComparer", "OrderBy(x => x % 3).ThenByDescending(x => -x)",
            "OrderBy(x => x % 3).ThenByDescending(x => -x, Comparer<int>.Default)", intSources),
        ("ThenByDescStruct", "OrderBy(x => x % 3).ThenByDescending(x => -x)",
            "OrderBy(x => x % 3).ThenByDescending(new NegateSelector(), new StructComparer())", intSources),
        ("GroupBy",
            "GroupBy(x => x % 3).Select(x => x.Sum())",
            "GroupBy(x => x % 3).Select(x => x.Sum())", intSources),
        ("GroupByComparer",
            "GroupBy(x => x % 3, EqualityComparer<int>.Default).Select(x => x.Sum())",
            "GroupBy(x => x % 3, EqualityComparer<int>.Default).Select(x => x.Sum())", intSources),
        ("GroupByElement",
            "GroupBy(x => x % 3, x => x).Select(x => x.Sum())",
            "GroupBy(x => x % 3, x => x).Select(x => x.Sum())", intSources),
        ("GroupByElementComparer",
            "GroupBy(x => x % 3, x => x, EqualityComparer<int>.Default).Select(x => x.Sum())",
            "GroupBy(x => x % 3, x => x, EqualityComparer<int>.Default).Select(x => x.Sum())", intSources),
        ("GroupByResult",
            "GroupBy(x => x % 3, (k, v) => v.Sum())",
            "GroupBy(x => x % 3, (k, v) => v.Sum())", intSources),
        ("GroupByResultComparer",
            "GroupBy(x => x % 3, (k, v) => v.Sum(), EqualityComparer<int>.Default)",
            "GroupBy(x => x % 3, (k, v) => v.Sum(), EqualityComparer<int>.Default)", intSources),
        ("GroupByElementResult",
            "GroupBy(x => x % 3, x => x, (k, v) => v.Sum())",
            "GroupBy(x => x % 3, x => x, (k, v) => v.Sum())", intSources),
        ("GroupByElementResultComparer",
            "GroupBy(x => x % 3, x => x, (k, v) => v.Sum(), EqualityComparer<int>.Default)",
            "GroupBy(x => x % 3, x => x, (k, v) => v.Sum(), EqualityComparer<int>.Default)", intSources),
        ("Cast", "Cast<string>()", "Cast<string>()", castSources),
        ("OfType", "OfType<string>()", "OfType<string>()", castSources),
    };
    /*
    public abstract class GroupBy<TUp, TKey> : IStubSignature { }

    public abstract class GroupByComparer<TUp, TKey> : IStubSignature { }

    public abstract class GroupByElement<TUp, TKey, TElement> : IStubSignature { }

    public abstract class GroupByElementComparer<TUp, TKey, TElement> : IStubSignature { }

    public abstract class GroupByResult<TUp, TKey, TResult> : IStubSignature { }

    public abstract class GroupByResultComparer<TUp, TKey, TResult> : IStubSignature { }

    public abstract class GroupByElementResult<TUp, TKey, TElement, TResult> : IStubSignature { }

    public abstract class GroupByElementResultComparer<TUp, TKey, TElement, TResult> : IStubSignature { }

    public abstract class GroupByStruct<TUp, TKey> : IStubSignature { }

    public abstract class GroupByStructComparer<TUp, TKey> : IStubSignature { }

    public abstract class GroupByStructElement<TUp, TKey, TElement> : IStubSignature { }

    public abstract class GroupByStructElementComparer<TUp, TKey, TElement> : IStubSignature { }

    public abstract class GroupByStructResult<TUp, TKey, TResult> : IStubSignature { }

    public abstract class GroupByStructResultComparer<TUp, TKey, TResult> : IStubSignature { }

    public abstract class GroupByStructElementResult<TUp, TKey, TElement, TResult> : IStubSignature { }

    public abstract class GroupByStructElementResultComparer<TUp, TKey, TElement, TResult> : IStubSignature { }
     */
#>

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Cathei.LinqGen;

namespace Cathei.LinqGen.Tests;

<#
    foreach (var expression in testExpressions)
    {
#>
[TestFixture]
public class <#= expression.title #>_Tests
{
<#
        foreach (var source in expression.sources)
        {
#>

    [Test]
    public void SameAsLinq_<#= source #>()
    {
        var expected = TestData.<#= source #>
            .<#= expression.linq #>;

        var actual = TestData.<#= source #>
            .Specialize()
            .<#= expression.linqgen #>;

        CollectionAssert.AreEqual(expected, actual.AsEnumerable());
    }

    [Test]
    public void MultipleEnumeration_MustBeSame_<#= source #>()
    {
        var enumerable = TestData.<#= source #>
            .Specialize()
            .<#= expression.linqgen #>;

        var array1 = enumerable.ToArray();
        var array2 = enumerable.ToArray();

        CollectionAssert.AreEqual(array1, array2);
    }

    [TestCase(0, 0)]
    [TestCase(5, 0)]
    [TestCase(0, 8)]
    [TestCase(7, 9)]
    public void SliceSameAsLinq_<#= source #>(int skip, int take)
    {
        var expected = TestData.<#= source #>
            .<#= expression.linq #>
            .Skip(skip).Take(take);

        var actual = TestData.<#= source #>
            .Specialize()
            .<#= expression.linqgen #>
            .Skip(skip).Take(take);

        CollectionAssert.AreEqual(expected, actual.AsEnumerable());
    }
<#
        }
#>
}
<#
    }
#>
