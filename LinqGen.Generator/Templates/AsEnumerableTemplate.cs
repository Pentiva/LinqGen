// LinqGen.Generator, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Cathei.LinqGen.Generator
{
    using static SyntaxFactory;
    using static CodeGenUtils;

    public static class AsEnumerableTemplate
    {
        private static readonly SyntaxTree TemplateSyntaxTree = CSharpSyntaxTree.ParseText(@"// DO NOT EDIT
// Generated by LinqGen.Generator

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Cathei.LinqGen;
using Cathei.LinqGen.Hidden;

namespace Cathei.LinqGen.Hidden
{
    // result of AsEnumerable, doesn't need to be public
    internal class _Enumerable_ : IEnumerable<_Element_>
    {
        private readonly _Upstream_ source;

        internal _Enumerable_(in _Upstream_ source)
        {
            this.source = source;
        }

        public IEnumerator<_Element_> GetEnumerator() => source.GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
}
");

        private class Rewriter : CSharpSyntaxRewriter
        {
            private readonly AsEnumerableOperation _instruction;

            public Rewriter(AsEnumerableOperation instruction)
            {
                _instruction = instruction;
            }

            public override SyntaxNode? VisitClassDeclaration(ClassDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        node = RewriteEnumerableClass(node);
                        break;
                }

                return base.VisitClassDeclaration(node);
            }

            public override SyntaxNode? VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        node = RewriteEnumerableConstructor(node);
                        break;
                }

                return base.VisitConstructorDeclaration(node);
            }

            public override SyntaxNode? VisitMethodDeclaration(MethodDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "AsEnumerable":
                        node = RewriteExtensionMethod(node);
                        break;
                }

                return base.VisitMethodDeclaration(node);
            }

            public override SyntaxNode? VisitIdentifierName(IdentifierNameSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Element_":
                        return _instruction.OutputElementType;

                    case "_Upstream_":
                        return _instruction.UpstreamResolvedClassName;
                }

                return base.VisitIdentifierName(node);
            }

            private ClassDeclarationSyntax RewriteEnumerableClass(ClassDeclarationSyntax node)
            {
                return node.WithIdentifier(_instruction.IdentifierName!.Identifier)
                    .WithTypeParameterList(_instruction.GetTypeParameters())
                    .WithConstraintClauses(_instruction.GetGenericConstraints());
            }

            private ConstructorDeclarationSyntax RewriteEnumerableConstructor(ConstructorDeclarationSyntax node)
            {
                return node.WithIdentifier(_instruction.IdentifierName!.Identifier);
            }

            private MethodDeclarationSyntax RewriteExtensionMethod(MethodDeclarationSyntax node)
            {
                return node.WithTypeParameterList(_instruction.GetTypeParameters())
                    .WithConstraintClauses(_instruction.GetGenericConstraints());
            }
        }

        public static SourceText Render(AsEnumerableOperation instruction)
        {
            var root = TemplateSyntaxTree.GetRoot();

            var rewriter = new Rewriter(instruction);
            root = rewriter.Visit(root);

            return root.NormalizeWhitespace().GetText(Encoding.UTF8);
        }
    }
}