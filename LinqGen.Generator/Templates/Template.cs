// LinqGen.Generator, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Cathei.LinqGen.Generator
{
    using static SyntaxFactory;
    using static CodeGenUtils;

    public static class Template
    {
        private static readonly SyntaxTree OperationTemplate = CSharpSyntaxTree.ParseText(@"// DO NOT EDIT
// Generated by LinqGen.Generator

using System;
using System.Collections;
using System.Collections.Generic;
using Cathei.LinqGen;
using Cathei.LinqGen.Hidden;

namespace Cathei.LinqGen.Hidden
{
    // enumerable is always readonly and internal as it is generated struct
    internal readonly struct _Enumerable_ : IStub<_Element_, NoOp>
    {
        internal _Enumerable_()
        {

        }

        public Enumerator GetEnumerator() => new Enumerator(this);

        public struct Enumerator : IEnumerator<_Element_>
        {
            internal Enumerator(in _Enumerable_ parent)
            {

            }

            public bool MoveNext()
            {
            }

            public TReturn Current
            {
                get
                {

                }
            }

            object IEnumerator.Current => Current;

            void IEnumerator.Reset() => throw new NotSupportedException();

            public void Dispose()
            {

            }
        }
    }
}

namespace Cathei.LinqGen
{
    // Extensions is always and must be internal as it is generated
    internal static partial class Extensions
    {
        public static _Enumerable_ ExtensionMethod()
        {
            return new _Enumerable_();
        }
    }
}
");

        // private static readonly StructDeclarationSyntax EnumerableStruct;
        // private static readonly ConstructorDeclarationSyntax EnumerableConstructor;
        //
        // private static readonly StructDeclarationSyntax EnumeratorStruct;
        // private static readonly ConstructorDeclarationSyntax EnumeratorConstructor;
        // private static readonly MethodDeclarationSyntax EnumeratorMoveNext;
        // private static readonly MethodDeclarationSyntax EnumeratorDispose;
        // private static readonly AccessorDeclarationSyntax EnumeratorCurrentGet;
        //
        // private static readonly ClassDeclarationSyntax ExtensionClass;
        // private static readonly MethodDeclarationSyntax ExtensionMethod;
        //

        private class Rewriter : CSharpSyntaxRewriter
        {
            private readonly Instruction _instruction;
            private readonly List<MemberInfo> _memberInfos;

            public Rewriter(Instruction instruction)
            {
                _instruction = instruction;
                _memberInfos = _instruction.GetMemberInfos().ToList();
            }

            public override SyntaxNode? VisitStructDeclaration(StructDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        node = RewriteEnumerableStruct(node);
                        break;

                    case "Enumerator":
                        node = RewriteEnumeratorStruct(node);
                        break;
                }

                return base.VisitStructDeclaration(node);
            }

            public override SyntaxNode? VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        node = RewriteEnumerableConstructor(node);
                        break;

                    case "Enumerator":
                        node = RewriteEnumeratorConstructor(node);
                        break;
                }

                return base.VisitConstructorDeclaration(node);
            }

            public override SyntaxNode? VisitMethodDeclaration(MethodDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "MoveNext":
                        node = RewriteEnumeratorMoveNext(node);
                        break;

                    case "Dispose":
                        node = RewriteEnumeratorDispose(node);
                        break;

                    case "ExtensionMethod":
                        node = RewriteExtensionMethod(node);
                        break;
                }

                return base.VisitMethodDeclaration(node);
            }

            public override SyntaxNode? VisitPropertyDeclaration(PropertyDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "Current":
                        if (node.ExplicitInterfaceSpecifier == null)
                            node = RewriteEnumeratorCurrent(node);
                        break;
                }

                return base.VisitPropertyDeclaration(node);
            }

            public override SyntaxNode? VisitIdentifierName(IdentifierNameSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        return _instruction.ClassName;

                    case "_Element_":
                        return _instruction.ElementName;
                }

                return base.VisitIdentifierName(node);
            }

            private IEnumerable<ParameterSyntax> GetParameters(MemberKind kind, bool firstThisParam)
            {
                foreach (var member in _memberInfos)
                {
                    if ((member.Kind & kind) != kind)
                        continue;

                    var param = member.AsParameter();

                    if (firstThisParam)
                    {
                        param = param.WithModifiers(ThisTokenList);
                        firstThisParam = false;
                    }

                    yield return param;
                }
            }

            private IEnumerable<ArgumentSyntax> GetArguments(MemberKind kind)
            {
                foreach (var member in _memberInfos)
                {
                    if ((member.Kind & kind) != kind)
                        continue;

                    yield return member.AsArgument();
                }
            }

            private IEnumerable<MemberDeclarationSyntax> GetFieldDeclarations(MemberKind kind, bool isReadOnly)
            {
                foreach (var member in _memberInfos)
                {
                    if ((member.Kind & kind) != kind)
                        continue;

                    var tokenList = isReadOnly ? PrivateReadOnlyTokenList : PrivateTokenList;
                    yield return FieldDeclaration(default, tokenList, VariableDeclaration(
                        member.Type, SingletonSeparatedList(VariableDeclarator(member.Name.Identifier))));
                }
            }

            private IEnumerable<StatementSyntax> GetAssignments(MemberKind kind, IdentifierNameSyntax? source = null)
            {
                foreach (var member in _memberInfos)
                {
                    if ((member.Kind & kind) != kind)
                        continue;

                    yield return ExpressionStatement(SimpleAssignmentExpression(
                        MemberAccessExpression(ThisExpression(), member.Name),
                        source == null ? member.Name : MemberAccessExpression(source, member.Name)));
                }
            }

            private StructDeclarationSyntax RewriteEnumerableStruct(StructDeclarationSyntax node)
            {
                return node.WithIdentifier(_instruction.ClassName!.Identifier)
                    .AddMembers(GetFieldDeclarations(MemberKind.Enumerable, true).ToArray());
            }

            private StructDeclarationSyntax RewriteEnumeratorStruct(StructDeclarationSyntax node)
            {
                return node.AddMembers(GetFieldDeclarations(MemberKind.Enumerator, false).ToArray());
            }

            private ConstructorDeclarationSyntax RewriteEnumerableConstructor(ConstructorDeclarationSyntax node)
            {
                return node.WithIdentifier(_instruction.ClassName!.Identifier)
                    .WithParameterList(ParameterList(GetParameters(MemberKind.Enumerable, false)))
                    .WithBody(Block(GetAssignments(MemberKind.Enumerable)));
            }

            private ConstructorDeclarationSyntax RewriteEnumeratorConstructor(ConstructorDeclarationSyntax node)
            {
                // assignment will be automatic if parameter kind is Both
                return node.WithBody(Block(_instruction.RenderConstructorBody()
                    .Statements.InsertRange(0, GetAssignments(MemberKind.Both, Instruction.ParentName))));
            }

            private MethodDeclarationSyntax RewriteEnumeratorMoveNext(MethodDeclarationSyntax node)
            {
                return node.WithBody(_instruction.RenderMoveNextBody());
            }

            private MethodDeclarationSyntax RewriteEnumeratorDispose(MethodDeclarationSyntax node)
            {
                return node.WithBody(_instruction.RenderDisposeBody());
            }

            private PropertyDeclarationSyntax RewriteEnumeratorCurrent(PropertyDeclarationSyntax node)
            {
                return node.WithType(_instruction.ElementName)
                    .WithAccessorList(AccessorList(SingletonList(AccessorDeclaration(
                        SyntaxKind.GetAccessorDeclaration, _instruction.RenderCurrentGetBody()))));
            }

            private MethodDeclarationSyntax RewriteExtensionMethod(MethodDeclarationSyntax node)
            {
                return node.WithIdentifier(_instruction.MethodName.Identifier)
                    .WithParameterList(ParameterList(GetParameters(MemberKind.Enumerable, true)))
                    .WithBody(Block(ReturnStatement(
                        ObjectCreationExpression(_instruction.ClassName!,
                            ArgumentList(GetArguments(MemberKind.Enumerable)), default))));
            }
        }

        static Template()
        {
            // var root = OperationTemplate.GetCompilationUnitRoot();
            //
            // var namespaceSyntax = (NamespaceDeclarationSyntax)root.Members[0];
            // EnumerableStruct = (StructDeclarationSyntax)namespaceSyntax.Members[0];
            //
            // namespaceSyntax = (NamespaceDeclarationSyntax)root.Members[1];
            // ExtensionClass = (ClassDeclarationSyntax)namespaceSyntax.Members[0];
            // ExtensionMethod = (MethodDeclarationSyntax)ExtensionClass.Members[0];
            //
            // foreach (var member in EnumerableStruct.Members)
            // {
            //     switch (member)
            //     {
            //         case ConstructorDeclarationSyntax constructorSyntax:
            //             EnumerableConstructor = constructorSyntax;
            //             break;
            //
            //         case StructDeclarationSyntax structSyntax:
            //             EnumeratorStruct = structSyntax;
            //             break;
            //     }
            // }
            //
            // foreach (var member in EnumeratorStruct!.Members)
            // {
            //     switch (member)
            //     {
            //         case ConstructorDeclarationSyntax constructorSyntax:
            //             EnumeratorConstructor = constructorSyntax;
            //             break;
            //
            //         case MethodDeclarationSyntax methodSyntax:
            //             if (methodSyntax.Identifier.ValueText == "MoveNext")
            //                 EnumeratorMoveNext = methodSyntax;
            //             else if (methodSyntax.Identifier.ValueText == "Dispose")
            //                 EnumeratorDispose = methodSyntax;
            //             break;
            //
            //         case PropertyDeclarationSyntax propertySyntax:
            //             EnumeratorCurrentGet = propertySyntax.AccessorList.Accessors[0];
            //             break;
            //     }
            // }
        }

        public static SourceText Render(Instruction instruction)
        {
            var root = OperationTemplate.GetRoot();

            var rewriter = new Rewriter(instruction);
            root = rewriter.Visit(root);

            return root.NormalizeWhitespace().GetText(Encoding.UTF8);
        }

        // public static void Render(StringBuilder builder, Node node)
        // {
        //     var memberInfos = node.GetMemberInfos().ToList();
        //
        //     builder.Clear();
        //     builder.Append(CommonHeaderStr);
        //
        //     builder.AppendFormat(EnumerableHeaderStr, node.ClassName, node.ElementName);
        //     {
        //         FormatMemberInfo(builder, EnumerableMemberStr, null, memberInfos, MemberKind.Enumerable);
        //
        //         builder.AppendFormat(EnumerableConstructorHeaderStr, node.ClassName);
        //         {
        //             FormatMemberInfo(builder, "{0} {1}", ", ",
        //                 memberInfos, MemberKind.Enumerable);
        //             builder.Append(EnumerableConstructorBodyStr);
        //             FormatMemberInfo(builder, EnumerableConstructorAssignStr, null,
        //                 memberInfos, MemberKind.Enumerable);
        //         }
        //         builder.Append(EnumerableConstructorFooterStr);
        //
        //         builder.Append(EnumerableGetEnumeratorStr);
        //
        //         builder.AppendFormat(EnumeratorHeaderStr, node.ElementName);
        //         {
        //             FormatMemberInfo(builder, EnumeratorMemberStr, null,
        //                 memberInfos, MemberKind.Enumerator);
        //
        //             builder.AppendFormat(EnumeratorConstructorHeaderStr, node.ClassName);
        //             {
        //                 // copy if both are member
        //                 FormatMemberInfo(builder, EnumeratorConstructorAssignStr, null,
        //                     memberInfos, MemberKind.Both);
        //
        //                 // additional constructor body
        //                 node.RenderConstructorBody(builder);
        //             }
        //             builder.Append(EnumeratorConstructorFooterStr);
        //
        //             builder.Append(EnumeratorMoveNextHeaderStr);
        //             {
        //                 node.RenderMoveNextBody(builder);
        //             }
        //             builder.Append(EnumeratorMoveNextFooterStr);
        //
        //             builder.AppendFormat(EnumeratorGetCurrentHeaderStr, node.ElementName);
        //             {
        //                 node.RenderGetCurrentBody(builder);
        //             }
        //             builder.Append(EnumeratorGetCurrentFooterStr);
        //
        //             builder.Append(EnumeratorResetStr);
        //
        //             builder.Append(EnumeratorDisposeHeaderStr);
        //             {
        //                 node.RenderDisposeBody(builder);
        //             }
        //             builder.Append(EnumeratorDisposeFooterStr);
        //         }
        //         builder.Append(EnumeratorFooterStr);
        //     }
        //     builder.Append(EnumerableFooterStr);
        //
        //     builder.AppendFormat(ExtensionsHeaderStr, node.ClassName);
        //     {
        //         builder.AppendFormat(ExtensionsMethodHeaderStr, node.ClassName, node.MethodName);
        //         {
        //             FormatMemberInfo(builder, "{0} {1}", ", ", memberInfos, MemberKind.Enumerable);
        //             builder.AppendFormat(ExtensionsMethodReturnStr, node.ClassName);
        //             FormatMemberInfo(builder, "{1}", ", ", memberInfos, MemberKind.Enumerable);
        //         }
        //         builder.Append(ExtensionsMethodFooterStr);
        //     }
        //     builder.Append(ExtensionsFooterStr);
        // }
        //
        // private static void FormatMemberInfo(
        //     StringBuilder builder, string format, string? separator, List<MemberInfo> memberInfos, MemberKind kind)
        // {
        //     bool first = true;
        //
        //     foreach (var memberInfo in memberInfos)
        //     {
        //         if ((memberInfo.Kind & kind) != kind)
        //             continue;
        //
        //         if (!first && separator != null)
        //             builder.Append(separator);
        //
        //         first = false;
        //         builder.AppendFormat(format, memberInfo.TypeStr, memberInfo.NameStr);
        //     }
        // }
    }
}