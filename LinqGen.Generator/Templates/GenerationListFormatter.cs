// LinqGen.Generator, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

using System;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Cathei.LinqGen.Generator
{
    public static class GenerationListFormatter
    {
        private const string SourceTemplate = @"// DO NOT EDIT
// Generated by LinqGen.Generator

using System;
using System.Collections.Generic;

namespace Cathei.LinqGen.Hidden
{{
    using Operations;

    public readonly struct {0}_{1} : ILinqGenEnumerable<{2}, NoOp>
    {{
        private readonly IList<{2}> source;

        internal {0}_{1}(IList<{2}> source)
        {{
            this.source = source;
        }}

        public Enumerator GetEnumerator() => new Enumerator(source);

        public struct Enumerator : IEnumerator<{2}>
        {{
            private readonly IList<{2}> source;
            private int index;

            internal Enumerator(IList<{2}> source)
            {{
                this.source = source;
            }}

            public bool MoveNext() => ++index < source.Count;

            public {2} Current => source[index];

            public void Reset() => throw new NotSupportedException();

            public void Dispose() { }
        }}
    }}
}}

namespace Cathei.LinqGen
{{
    using Hidden;

    public static partial class LinqGenExtensions
    {{
        public static {0}_{1} Generate(this IList<{2}> source)
            => new {0}_{1}(source);
    }}
}}
";

        public static void Format(StringBuilder builder, GenerationItem item, int id)
        {
            string shortName = Constants.Op.ShortName[Constants.Op.GenList];
            string elementFullName = item.ElementTypeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            builder.AppendFormat(SourceTemplate, shortName, id, elementFullName);
        }
    }
}