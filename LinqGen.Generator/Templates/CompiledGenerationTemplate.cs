// LinqGen.Generator, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Cathei.LinqGen.Generator
{
    using static SyntaxFactory;
    using static CodeGenUtils;

    public static class CompiledGenerationTemplate
    {
        private static readonly SyntaxTree TemplateSyntaxTree = CSharpSyntaxTree.ParseText(@"// DO NOT EDIT
// Generated by LinqGen.Generator

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Cathei.LinqGen;
using Cathei.LinqGen.Hidden;

namespace Cathei.LinqGen
{
    // Extensions needs to be internal to prevent ambiguous resolution
    internal static partial class _Extensions_
    {

    }
}
");

        private class Rewriter : CSharpSyntaxRewriter
        {
            private readonly IdentifierNameSyntax _assemblyName;
            private readonly CompiledGeneration _instruction;

            public Rewriter(IdentifierNameSyntax assemblyName, CompiledGeneration instruction)
            {
                _assemblyName = assemblyName;
                _instruction = instruction;
            }

            public override SyntaxNode? VisitClassDeclaration(ClassDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Extensions_":
                        node = RewriteExtensionClass(node);
                        break;
                }

                return base.VisitClassDeclaration(node);
            }

            private ClassDeclarationSyntax RewriteExtensionClass(ClassDeclarationSyntax node)
            {
                return node.WithIdentifier(
                        Identifier($"LinqGenExtensions_{_instruction.IdentifierName!.Identifier.ValueText}"))
                    .WithMembers(new SyntaxList<MemberDeclarationSyntax>(GetExtensionMethods()));
            }

            private IEnumerable<MethodDeclarationSyntax> GetExtensionMethods()
            {
                if (_instruction.Evaluations == null)
                {
                    // nothing to evaluate
                    // downstream will have separated files
                    yield break;
                }

                foreach (var evaluation in _instruction.Evaluations.Values)
                {
                    yield return MethodDeclaration(new(AggressiveInliningAttributeList),
                        PublicStaticTokenList, evaluation.ReturnType, default,
                        evaluation.MethodName.Identifier, evaluation.GetTypeParameters(false),
                        ParameterList(evaluation.GetParameters()), evaluation.GetGenericConstraints(false),
                        evaluation.RenderMethodBody(), default, default);
                }
            }
        }

        public static SourceText Render(IdentifierNameSyntax assemblyName, CompiledGeneration instruction)
        {
            var root = TemplateSyntaxTree.GetRoot();

            var rewriter = new Rewriter(assemblyName, instruction);
            root = rewriter.Visit(root);

            return root.NormalizeWhitespace().GetText(Encoding.UTF8);
        }
    }
}