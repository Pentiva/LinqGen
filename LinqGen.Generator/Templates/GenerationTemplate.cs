// LinqGen.Generator, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Cathei.LinqGen.Generator
{
    using static SyntaxFactory;
    using static CodeGenUtils;

    public static class GenerationTemplate
    {
        private static readonly SyntaxTree TemplateSyntaxTree = CSharpSyntaxTree.ParseText(@"// DO NOT EDIT
// Generated by LinqGen.Generator

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Cathei.LinqGen;
using Cathei.LinqGen.Hidden;

namespace Cathei.LinqGen.Hidden
{
    // Enumerable is always readonly
    // Non-exported Enumerable should consider anonymous type, thus it will be internal
    internal readonly struct _Enumerable_ : IInternalStub<_Element_>
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal _Enumerable_() : this()
        {

        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {

            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Enumerator GetEnumerator()
        {
            return new Enumerator();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Enumerator GetSliceEnumerator(int skip, int take)
        {
            return new Enumerator();
        }

        public struct Enumerator : IEnumerator<_Element_>
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal Enumerator() : this()
            {

            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MoveNext()
            {
            }

            public _Element_ Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {

                }
            }

            object IEnumerator.Current => Current;

            void IEnumerator.Reset() => throw new NotSupportedException();

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Dispose()
            {

            }
        }
    }
}

namespace Cathei.LinqGen
{
    // Extensions needs to be internal to prevent ambiguous resolution
    internal static partial class _Extensions_
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static _Enumerable_ _ExtensionMethod_()
        {
            return new _Enumerable_();
        }
    }
}
");

        private class Rewriter : CSharpSyntaxRewriter
        {
            private readonly CompilingGeneration _instruction;

            public Rewriter(CompilingGeneration instruction)
            {
                _instruction = instruction;
            }

            public override SyntaxNode? VisitStructDeclaration(StructDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        node = RewriteEnumerableStruct(node);
                        break;

                    case "Enumerator":
                        node = RewriteEnumeratorStruct(node);
                        break;
                }

                return base.VisitStructDeclaration(node);
            }

            public override SyntaxNode? VisitClassDeclaration(ClassDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Extensions_":
                        node = RewriteExtensionClass(node);
                        break;
                }

                return base.VisitClassDeclaration(node);
            }

            public override SyntaxNode? VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        node = RewriteEnumerableConstructor(node);
                        break;

                    case "Enumerator":
                        node = RewriteEnumeratorConstructor(node);
                        break;
                }

                return base.VisitConstructorDeclaration(node);
            }

            public override SyntaxNode? VisitMethodDeclaration(MethodDeclarationSyntax? node)
            {
                switch (node!.Identifier.ValueText)
                {
                    case "GetEnumerator":
                        node = RenderGetEnumerator(node);
                        break;

                    case "GetSliceEnumerator":
                        if (!_instruction.IsPartition)
                            return null;

                        node = RenderGetSliceEnumerator(node);
                        break;

                    case "MoveNext":
                        node = RewriteEnumeratorMoveNext(node);
                        break;

                    case "Dispose":
                        node = RewriteEnumeratorDispose(node);
                        break;

                    case "_ExtensionMethod_":
                        node = RewriteExtensionMethod(node);
                        break;
                }

                if (node == null)
                    return null;
                return base.VisitMethodDeclaration(node);
            }

            private MethodDeclarationSyntax RenderGetEnumerator(MethodDeclarationSyntax node)
            {
                return node.WithBody(_instruction.RenderGetEnumeratorBody());
            }

            private MethodDeclarationSyntax RenderGetSliceEnumerator(MethodDeclarationSyntax node)
            {
                return node.WithBody(_instruction.RenderGetSliceEnumeratorBody());
            }

            public override SyntaxNode? VisitPropertyDeclaration(PropertyDeclarationSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "Current":
                        if (node.ExplicitInterfaceSpecifier == null)
                            node = RewriteEnumeratorCurrent(node);
                        break;

                    case "Count":
                        if (!_instruction.IsCollection)
                            return null;

                        node = RewriteEnumerableCount(node);
                        break;
                }

                return base.VisitPropertyDeclaration(node);
            }

            public override SyntaxNode? VisitIdentifierName(IdentifierNameSyntax node)
            {
                switch (node.Identifier.ValueText)
                {
                    case "_Enumerable_":
                        if (_instruction.Arity == 0)
                            return _instruction.IdentifierName;
                        return GenericName(_instruction.IdentifierName!.Identifier, _instruction.GetTypeArguments()!);

                    case "_Element_":
                        return _instruction.OutputElementType;
                }

                return base.VisitIdentifierName(node);
            }

            private StructDeclarationSyntax RewriteEnumerableStruct(StructDeclarationSyntax node)
            {
                var additionalMembers = _instruction
                    .GetFieldDeclarations(MemberKind.Enumerable, true)
                    .Concat(GetOperationMethods());

                var baseListTypes = node.BaseList!.
                    Types.AddRange(_instruction.GetBaseInterfaces());

                return node.Update(node.AttributeLists, node.Modifiers, node.Keyword,
                    _instruction.IdentifierName.Identifier, _instruction.GetTypeParameters(),
                    node.BaseList.WithTypes(baseListTypes), _instruction.GetGenericConstraints(), node.OpenBraceToken,
                    node.Members.AddRange(additionalMembers), node.CloseBraceToken, node.SemicolonToken);
            }

            private StructDeclarationSyntax RewriteEnumeratorStruct(StructDeclarationSyntax node)
            {
                return node.AddMembers(_instruction.GetFieldDeclarations(MemberKind.Enumerator, false).ToArray());
            }

            private ClassDeclarationSyntax RewriteExtensionClass(ClassDeclarationSyntax node)
            {
                return node.WithIdentifier(
                        Identifier($"LinqGenExtensions_{_instruction.IdentifierName.Identifier.ValueText}"))
                    .AddMembers(GetExtensionMethods().ToArray());
            }

            private ConstructorDeclarationSyntax RewriteEnumerableConstructor(ConstructorDeclarationSyntax node)
            {
                return node.WithIdentifier(_instruction.IdentifierName.Identifier)
                    .WithParameterList(ParameterList(_instruction.GetParameters(MemberKind.Enumerable)))
                    .WithBody(Block(_instruction.GetAssignments(MemberKind.Enumerable)));
            }

            private ConstructorDeclarationSyntax RewriteEnumeratorConstructor(ConstructorDeclarationSyntax node)
            {
                return _instruction.RenderEnumeratorConstructor();
            }

            private MethodDeclarationSyntax RewriteEnumeratorMoveNext(MethodDeclarationSyntax node)
            {
                return node.WithBody(_instruction.RenderMoveNextBody());
            }

            private MethodDeclarationSyntax RewriteEnumeratorDispose(MethodDeclarationSyntax node)
            {
                return node.WithBody(_instruction.RenderDisposeBody());
            }

            private PropertyDeclarationSyntax RewriteEnumeratorCurrent(PropertyDeclarationSyntax node)
            {
                var getAccessor = node.AccessorList!.Accessors[0].WithBody(_instruction.RenderCurrentGetBody());
                return node.WithAccessorList(AccessorList(SingletonList(getAccessor)));
            }

            private PropertyDeclarationSyntax RewriteEnumerableCount(PropertyDeclarationSyntax node)
            {
                var getAccessor = node.AccessorList!.Accessors[0].WithBody(_instruction.RenderCountGetBody());
                return node.WithAccessorList(AccessorList(SingletonList(getAccessor)));
            }

            private MethodDeclarationSyntax? RewriteExtensionMethod(MethodDeclarationSyntax node)
            {
                if (_instruction.ShouldBeMemberMethod)
                    return null;

                // keep identifier name here so it can be visited later
                var body = Block(ReturnStatement(
                    ObjectCreationExpression(IdentifierName("_Enumerable_"),
                        ArgumentList(_instruction.GetArguments(MemberKind.Enumerable)), default)));

                return MethodDeclaration(
                    node.AttributeLists, node.Modifiers, node.ReturnType, node.ExplicitInterfaceSpecifier,
                    _instruction.MethodName.Identifier, _instruction.GetTypeParameters(),
                    ParameterList(_instruction.GetParameters(MemberKind.Enumerable, true)),
                    _instruction.GetGenericConstraints(), body, default, default);
            }

            private IEnumerable<MemberDeclarationSyntax> GetOperationMethods()
            {
                if (_instruction.Downstream == null)
                {
                    // nothing to operate
                    yield break;
                }

                foreach (var downstream in _instruction.Downstream)
                {
                    if (!downstream.ShouldBeMemberMethod)
                        continue;

                    int arityDiff = downstream.Arity - _instruction.Arity;

                    NameSyntax downstreamClassName = downstream.ClassName;

                    if (downstream.Arity != 0)
                    {
                        downstreamClassName = MakeGenericName(
                            downstreamClassName, downstream.GetTypeArguments()!);
                    }

                    var typeParameters = downstream.GetTypeParameters(arityDiff);
                    var genericConstraints = downstream.GetGenericConstraints(arityDiff);

                    // swap first argument with this
                    var argumentList = ArgumentList(
                        downstream.GetArguments(MemberKind.Enumerable)
                            .Skip(1).Prepend(Argument(ThisExpression())));

                    var parameterList = ParameterList(
                        downstream.GetParameters(MemberKind.Enumerable).Skip(1));

                    var body = Block(ReturnStatement(
                        ObjectCreationExpression(downstreamClassName, argumentList, default)));

                    yield return MethodDeclaration(new(AggressiveInliningAttributeList),
                        PublicTokenList, downstreamClassName, default,
                        downstream.MethodName.Identifier, typeParameters,
                        parameterList, genericConstraints, body, default, default);
                }
            }

            private IEnumerable<MemberDeclarationSyntax> GetExtensionMethods()
            {
                if (_instruction.Evaluations == null)
                {
                    // nothing to evaluate
                    yield break;
                }

                // evaluation can use specialization, so it should be extension method
                foreach (var evaluation in _instruction.Evaluations)
                {
                    yield return MethodDeclaration(new(AggressiveInliningAttributeList),
                        PublicStaticTokenList, evaluation.ReturnType, default,
                        evaluation.MethodName.Identifier, evaluation.GetTypeParameters(),
                        ParameterList(evaluation.GetParameters()), evaluation.GetGenericConstraints(),
                        evaluation.RenderMethodBody(), default, default);
                }
            }
        }

        public static SourceText Render(CompilingGeneration instruction)
        {
            var root = TemplateSyntaxTree.GetRoot();

            var rewriter = new Rewriter(instruction);
            root = rewriter.Visit(root);

            return root.NormalizeWhitespace().GetText(Encoding.UTF8);
        }
    }
}